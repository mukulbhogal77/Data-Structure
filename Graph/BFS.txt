Problem:
Given N and E, the number of nodes and edges in a directed graph. The task is to do Breadth First Search of this graph.
Solution:
import java.util.*;
import java.lang.*;
import java.io.*;

class Driverclass {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            ArrayList<ArrayList<Integer>> list = new ArrayList<>();
            int nov = sc.nextInt();
            int edg = sc.nextInt();

            for (int i = 0; i < nov; i++) list.add(i, new ArrayList<Integer>());

            for (int i = 1; i <= edg; i++) {
                int u = sc.nextInt();
                int v = sc.nextInt();
                list.get(u).add(v);
            }
            boolean vis[] = new boolean[nov];
            for (int i = 0; i < nov; i++) vis[i] = false;
            new Traversal().bfs(0, list, vis, nov);
            System.out.println();
        }
    }
}
// } Driver Code Ends

class Traversal {
    static void bfs(int s, ArrayList<ArrayList<Integer>> list, boolean vis[], int nov) {
       Queue<Integer> queue=new LinkedList<Integer>();
       vis[s]=true;
       queue.add(s);
       while(!queue.isEmpty()) {
           int x=queue.poll();
           System.out.print(x+" ");
           for(int i=0;i<list.get(x).size();i++){
               if(!vis[list.get(x).get(i)]) {
                   vis[list.get(x).get(i)]=true;
                   queue.add(list.get(x).get(i));
               }
           }
       }
    }
}
